version: "3.9"
services:
    proxy:
        image: nginx:latest
        container_name: proxy
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./cert/localhost/localhost.crt:/etc/ssl/certs/nginx-selfsigned.crt
            - ./cert/localhost/localhost.decrypted.key:/etc/ssl/private/nginx-selfsigned.key
        networks:
            -   frontend
            -   backend
        ports:
            - "443:443"
            - "80:80"
        expose:
            - "8008"
        depends_on:
            -   python
            -   staticfiles
        restart: on-failure

    python:
        build: ./backend
        env_file: dev.env
        container_name: python
        command: gunicorn djrestauth.wsgi -b 0.0.0.0:81
        volumes:
            - ./backend:/code
        networks:
            -   backend
            -   hidden
        restart: on-failure
        deploy:
          labels:
            - traefik.enable=true
            - traefik.constraint-label-stack=localhost
            - traefik.http.routers.localhost-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
            - traefik.http.services.localhost-backend.loadbalancer.server.port=80

    staticfiles:
        image: nginx:1.21
        container_name: staticfiles
        volumes:
            - ./frontapp/dist/app:/www/app
            - ./frontapp/nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
            -   frontend

        restart: on-failure

    db:
        image: postgres:latest
        container_name: database
        volumes:
            -   dbData:/var/lib/postgresql/data
        environment:
            -   "POSTGRES_USER=SuperUesr"
            -   "POSTGRES_PASSWORD=<<0012A96s21g39>>"
            -   "POSTGRES_DB=postgres"
            -   "PGPASSWORD=63A67s411g"
            -   "PGDATA=/var/lib/postgresql/data"
        networks:
            -   hidden
#    traefik:
#        image: traefik:v2.2
#        ports:
#            - "442:8080"
#            - "83:80"
#        networks:
#          - frontend
#          - backend
#          - hidden
#        volumes:
#          - /var/run/docker.sock:/var/run/docker.sock
#        command:
#          # Enable Docker in Traefik, so that it reads labels from Docker services
#          - --providers.docker
#          # Add a constraint to only use services with the label for this stack
#          # from the env var TRAEFIK_TAG
#          - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `localhost`)
#          # Do not expose all Docker services, only the ones explicitly exposed
#          - --providers.docker.exposedbydefault=true
#          # Enable Docker Swarm mode
#          # - --providers.docker.swarmmode
#          # Enable the access log, with HTTP requests
#          - --accesslog
#          # Enable the Traefik log, for configurations and errors
#          - --log
#          # Enable the Dashboard and API
#          - --api
#        deploy:
#          placement:
#            constraints:
#              - node.role == manager
#          labels:
#            # Enable Traefik for this service, to make it available in the public network
#            - traefik.enable=true
#            # Use the traefik-public network (declared below)
#            - traefik.docker.network=traefik-public
#            # Use the custom label "traefik.constraint-label=traefik-public"
#            # This public Traefik will only use services with this label
#            # - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
#            # traefik-http set up only to use the middleware to redirect to https
#            - traefik.http.middlewares.localhost-https-redirect.redirectscheme.scheme=https
#            - traefik.http.middlewares.localhost-https-redirect.redirectscheme.permanent=true
#            # Handle host with and without "www" to redirect to only one of them
#            # Uses environment variable DOMAIN
#            # To disable www redirection remove the Host() you want to discard, here and
#            # below for HTTPS
#            - traefik.http.routers.localhost-proxy-http.rule=Host(`localhost`) || Host(`www.localhost`)
#            - traefik.http.routers.localhost-proxy-http.entrypoints=http
#            # traefik-https the actual router using HTTPS
#            - traefik.http.routers.localhost-proxy-https.rule=Host(`localhost`) || Host(`www.localhost`)
#            - traefik.http.routers.localhost-proxy-https.entrypoints=https
#            - traefik.http.routers.localhost-proxy-https.tls=true
#            # Use the "le" (Let's Encrypt) resolver created below
#            - traefik.http.routers.localhost-proxy-https.tls.certresolver=le
#            # Define the port inside of the Docker service to use
#            - traefik.http.services.localhost-proxy.loadbalancer.server.port=80
#            # Handle domain with and without "www" to redirect to only one
#            # To disable www redirection remove the next line
#            - traefik.http.middlewares.localhost-www-redirect.redirectregex.regex=^https?://(www.)?(localhost)/(.*)
#            # Redirect a domain with www to non-www
#            # To disable it remove the next line
#            - traefik.http.middlewares.localhost-www-redirect.redirectregex.replacement=https://localhost/$${3}
#            # Redirect a domain without www to www
#            # To enable it remove the previous line and uncomment the next
#            # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
#            # Middleware to redirect www, to disable it remove the next line
#            - traefik.http.routers.localhost-proxy-https.middlewares=localhost-www-redirect
#            # Middleware to redirect www, and redirect HTTP to HTTPS
#            # to disable www redirection remove the section: localhost-www-redirect,
#            - traefik.http.routers.localhost-proxy-http.middlewares=localhost-www-redirect,localhost-https-redirect

networks:
    frontend:
        driver: bridge
        name: frontend_network
        internal: false
    backend:

        driver: bridge
        name: backend_network
        internal: false
    hidden:
        driver: bridge
        name: hidden_network
        internal: true
volumes:
    dbData:
        name: rest_authpsql_volume
